{"name":"Dot-object","tagline":"Transform json objects using dot notation","body":"[![Build Status](https://travis-ci.org/rhalff/dot-object.png)](https://travis-ci.org/rhalff/dot-object)\r\n\r\nDot-Object\r\n========\r\n\r\nDot-Object makes it possible to transform javascript objects using dot notation.\r\n\r\n\r\n#### Move a property within one object to another location\r\n```javascript\r\nvar DJ = require('dot-object');\r\n\r\nvar dj = new DJ();\r\n\r\nvar obj = {\r\n  'first_name': 'John',\r\n  'last_name': 'Doe'\r\n};\r\n\r\ndj.move('first_name', 'contact.firstname', obj);\r\ndj.move('last_name', 'contact.lastname', obj);\r\n\r\nconsole.log(obj);\r\n\r\n{\r\n  contact: {\r\n    firstname: 'John',\r\n    lastname: 'Doe'\r\n  }\r\n}\r\n\r\n```\r\n\r\n#### Transform an object\r\n\r\n```javascript\r\nvar DJ = require('dot-object');\r\n\r\nvar dj = new DJ();\r\n\r\nvar row = {\r\n  'id': 2,\r\n  'contact.name.first': 'John',\r\n  'contact.name.last': 'Doe',\r\n  'contact.email': 'example@gmail.com',\r\n  'contact.info.about.me': 'classified'\r\n};\r\n\r\ndj.object(row);\r\n\r\nconsole.log(row);\r\n\r\n{\r\n  \"id\": 2,\r\n  \"contact\": {\r\n    \"name\": {\r\n      \"first\": \"John\",\r\n      \"last\": \"Doe\"\r\n    },\r\n    \"email\": \"example@gmail.com\",\r\n    \"info\": {\r\n      \"about\": {\r\n      \"me\": \"classified\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nTo convert manually per string use:\r\n```javascript\r\nvar DJ = require('dot-object');\r\n\r\nvar dj = new DJ();\r\n\r\nvar obj = { val: 'test' };\r\ndj.str('this.is.my.string', 'value', obj);\r\n\r\nconsole.log(obj);\r\n\r\n{\r\n  \"val\": \"test\",\r\n  \"this\": {\r\n    \"is\": {\r\n      \"my\": {\r\n        \"string\": \"value\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### Pick a value using dot notation:\r\n```\r\nvar obj = {\r\n some: {\r\n   nested: {\r\n     value: 'Hi there!'\r\n   }\r\n }\r\n};\r\n\r\nvar val = dj.pick('some.nested.key', obj);\r\nconsole.log(val);\r\n\r\nHi there!\r\n```\r\n\r\n### Using modifiers\r\n\r\nYou can use modifiers to translate values on the fly.\r\n\r\nThis example uses the [underscore.string](https://github.com/epeli/underscore.string) library.\r\n\r\n\r\n\r\n```javascript\r\nvar DJ = require('dot-object');\r\n\r\nvar dj = new DJ();\r\n\r\nvar _s = require('underscore.string');\r\n\r\nvar row = {\r\n  'nr': 200,\r\n  'doc.name': '    My Document   '\r\n};\r\n\r\nvar mods = {\r\n  \"doc.name\": [_s.trim, _s.underscored],\r\n};\r\n\r\ndj.object(row, mods);\r\n\r\nconsole.log(row);\r\n```\r\n\r\n```\r\n{\r\n  \"nr\": 200,\r\n  \"doc\": {\r\n    \"name\": \"my_document\"\r\n  }\r\n}\r\n```\r\n\r\nOr using .str() directy:\r\n\r\n```javascript\r\n\r\nvar DJ = require('dot-object');\r\nvar _s = require('underscore.string');\r\nvar obj = { id: 100 };\r\n\r\nvar dj = new DJ();\r\n\r\n// use one modifier\r\ndj.str('my.title', 'this is my title', obj, _s.slugify);\r\n\r\n// multiple modifiers\r\ndj.str('my.title', '   this is my title  ', obj, [_s.trim, _s.slugify]);\r\n\r\nconsole.log(obj);\r\n```\r\nResult:\r\n```json\r\n{\r\n  \"id\": 100,\r\n  \"my\": {\r\n    \"title\": \"this-is-my-title\"\r\n  }\r\n}\r\n```\r\n\r\n## Using a different seperator\r\n\r\nIf you do not like dot notation, you are free to specify a different seperator.\r\n\r\n```javascript\r\nvar DJ = require('dot-object');\r\n\r\nvar dj = new DJ('->');\r\n\r\nvar _s = require('underscore.string');\r\n\r\nvar row = {\r\n  'nr': 200,\r\n  'doc->name': '    My Document   '\r\n};\r\n\r\nvar mods = {\r\n  \"doc->name\": [_s.trim, _s.underscored],\r\n};\r\n\r\ndj.object(row, mods);\r\n\r\nconsole.log(row);\r\n```\r\n\r\n```\r\n{\r\n  \"nr\": 200,\r\n  \"doc\": {\r\n    \"name\": \"my_document\"\r\n  }\r\n}\r\n```\r\n\r\n## Transforming SQL results to JSON\r\n\r\nSQL translation on the fly:\r\n\r\n```javascript\r\n // TODO\r\n\r\n```\r\n\r\n\r\n> Copyright Â© 2013 Rob Halff, released under the MIT license\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}